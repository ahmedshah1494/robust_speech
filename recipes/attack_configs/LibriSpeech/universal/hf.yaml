# General information
seed: 1002
__set_seed: !apply:torch.manual_seed [!ref <seed>]
root: !PLACEHOLDER
lang: ""
tokenizers_folder: !ref <root>/tokenizers

# Hyparameters below are dependant on the attack and model used 
# and should be changed at the user's discretion
# -------------------------------------------------------------
# Attack information
nb_epochs: 10
nb_iter: 20
lr: 0.001
snr: 50
eps_item: 0.003
order: 2
time_universal: False

delta: !new:robust_speech.adversarial.utils.TensorModule
   size: (288000,)

attack_class: !name:robust_speech.adversarial.attacks.universal.UniversalAttack
  targeted: False
  nb_epochs: !ref <nb_epochs>
  nb_iter: !ref <nb_iter>
  lr: !ref <lr>
  snr: !ref <snr>
  eps_item: !ref <eps_item>
  time_universal: !ref <time_universal>
  univ_perturb: !ref <delta>
  order: !ref <order>
save_audio: False
attack_name: universal

# Model information
model_repo: !PLACEHOLDER
model_name: !PLACEHOLDER
hf_model_name: !ref <model_repo>/<model_name>
target_brain_class: !name:robust_speech.models.sb_hf_binding.HuggingFaceASR
target_brain_hparams_file: !ref model_configs/hf_models/<model_name><lang>.yaml
source_model_name: !ref <model_name>
source_brain_class: !ref <target_brain_class>
source_brain_hparams_file: !ref model_configs/hf_models/<model_name><lang>.yaml

# Tokenizer information (compatible with target and source)
tokenizer: !apply:transformers.AutoTokenizer.from_pretrained
   - !ref <hf_model_name>

   # -------------------------------------------------------------
dataset: LibriSpeech
output_folder: !ref <root>/attacks/<attack_name>/<dataset>/<source_model_name>-<snr>/<seed>
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>
log: !ref <output_folder>/log.txt
save_audio_path: !ref <output_folder>/save

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
   checkpoints_dir: !ref <output_folder>
   recoverables:
      delta: !ref <delta>

# params_folder: !PLACEHOLDER # replace with the checkpoint of your universal perturbation
# pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
#    collect_in: !ref <params_folder>
#    loadables:
#       delta: !ref <delta>
#    paths:
#       delta: !ref <params_folder>/delta.ckpt

dataset_prepare_fct: !name:robust_speech.data.librispeech.prepare_librispeech
dataio_prepare_fct: !name:robust_speech.data.dataio.dataio_prepare

# Data files
data_folder: !ref <root>/data/<dataset> # e.g, /localscratch/LibriSpeech
csv_folder: !ref <data_folder>/csv # e.g, /localscratch/LibriSpeech
# If RIRS_NOISES dir exists in /localscratch/xxx_corpus/RIRS_NOISES
# then data_folder_rirs should be /localscratch/xxx_corpus
# otherwise the dataset will automatically be downloaded
test_splits: ["dev-clean"]
train_splits: ["dev-clean"]
skip_prep: True
ckpt_interval_minutes: 15 # save checkpoint every N min
data_csv_name: dev-clean
test_csv:
   - !ref <data_folder>/csv/<data_csv_name>.csv
train_csv: !ref <data_folder>/csv/<data_csv_name>.csv
batch_size: 1 # This works for 2x GPUs with 32GB
avoid_if_longer_than: 20.0
sorting: ascending

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 80

# Decoding parameters (only for text_pipeline)
blank_index: 0
bos_index: 1
eos_index: 2

test_dataloader_opts:
    batch_size: 1
train_dataloader_opts:
    batch_size: 1

logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <log>
    
